/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  ProcessChannel,
  ProcessChannelInterface,
} from "../ProcessChannel";

const _abi = [
  {
    inputs: [
      {
        internalType: "address[6]",
        name: "_participants",
        type: "address[6]",
      },
      {
        internalType: "uint256",
        name: "_disputeWindowInUNIX",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "continueAfterDispute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "disputeMadeAtUNIX",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "disputeWindowInUNIX",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "index",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "participants",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "index",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "from",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "caseID",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "taskID",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "newTokenState",
            type: "uint256",
          },
          {
            internalType: "bytes[]",
            name: "signatures",
            type: "bytes[]",
          },
        ],
        internalType: "struct ProcessChannel.Step",
        name: "_step",
        type: "tuple",
      },
    ],
    name: "submit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenState",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a06040526001600055600060015560006008553480156200002057600080fd5b50604051620017e8380380620017e883398181016040528101906200004691906200031d565b816002906006620000599291906200006a565b508060808181525050505062000364565b8260068101928215620000d9579160200282015b82811115620000d85782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906200007e565b5b509050620000e89190620000ec565b5090565b5b8082111562000107576000816000905550600101620000ed565b5090565b6000604051905090565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200016a826200011f565b810181811067ffffffffffffffff821117156200018c576200018b62000130565b5b80604052505050565b6000620001a16200010b565b9050620001af82826200015f565b919050565b600067ffffffffffffffff821115620001d257620001d162000130565b5b602082029050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200020f82620001e2565b9050919050565b620002218162000202565b81146200022d57600080fd5b50565b600081519050620002418162000216565b92915050565b60006200025e6200025884620001b4565b62000195565b905080602084028301858111156200027b576200027a620001dd565b5b835b81811015620002a8578062000293888262000230565b8452602084019350506020810190506200027d565b5050509392505050565b600082601f830112620002ca57620002c96200011a565b5b6006620002d984828562000247565b91505092915050565b6000819050919050565b620002f781620002e2565b81146200030357600080fd5b50565b6000815190506200031781620002ec565b92915050565b60008060e0838503121562000337576200033662000115565b5b60006200034785828601620002b2565b92505060c06200035a8582860162000306565b9150509250929050565b60805161145a6200038e600039600081816101a6015281816101d90152610848015261145a6000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063421f9e341161005b578063421f9e34146100ee578063467ad0e91461010c578063c83a6aa714610128578063e90dd9e2146101445761007d565b80632986c0e5146100825780633594b762146100a057806335c1d349146100be575b600080fd5b61008a610162565b6040516100979190610d8a565b60405180910390f35b6100a8610168565b6040516100b59190610d8a565b60405180910390f35b6100d860048036038101906100d39190610ddb565b61016e565b6040516100e59190610e49565b60405180910390f35b6100f66101a4565b6040516101039190610d8a565b60405180910390f35b61012660048036038101906101219190610ddb565b6101c8565b005b610142600480360381019061013d9190610e88565b6107eb565b005b61014c61089e565b6040516101599190610d8a565b60405180910390f35b60015481565b60085481565b6002816006811061017e57600080fd5b016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600854141580156102075750427f00000000000000000000000000000000000000000000000000000000000000006008546102059190610f00565b105b610246576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023d90610fb3565b60405180910390fd5b600260006006811061025b5761025a610fd3565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480156102b75750806000145b80156102c7575060018060005416145b156102e15760026001191760008082825416925050819055505b60026001600681106102f6576102f5610fd3565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480156103525750806001145b8015610362575060028060005416145b1561037c5760046002191760008082825416925050819055505b600260016006811061039157610390610fd3565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480156103ed5750806002145b80156103fd575060048060005416145b156104175760086004191760008082825416925050819055505b600260016006811061042c5761042b610fd3565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480156104885750806003145b8015610498575060048060005416145b156104b25760106004191760008082825416925050819055505b60026003600681106104c7576104c6610fd3565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480156105235750806004145b8015610533575060108060005416145b1561054d5760046010191760008082825416925050819055505b600260036006811061056257610561610fd3565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480156105be5750806005145b80156105ce575060108060005416145b156105e85760206010191760008082825416925050819055505b60026004600681106105fd576105fc610fd3565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480156106595750806006145b8015610669575060208060005416145b156106835760406020191760008082825416925050819055505b600260056006811061069857610697610fd3565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480156106f45750806007145b8015610704575060408060005416145b1561071e5760206040191760008082825416925050819055505b600260046006811061073357610732610fd3565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614801561078f5750806008145b801561079f575060208060005416145b156107b95760106020191760008082825416925050819055505b5b6001156107e8576008806000541614156107e75760806008191760008082825416925050819055506107ba565b5b50565b808060a001906107fb9190611011565b9050600014801561080e57506008546000145b801561081c57506000546001145b1561082957426008819055505b610832816108a4565b80156108785750600854600014806108775750427f00000000000000000000000000000000000000000000000000000000000000006008546108749190610f00565b10155b5b1561089b5742600881905550806000013560018190555080608001356000819055505b50565b60005481565b60008160000135600154106108bc5760009050610a72565b6000826000013583604001358460200135856060013586608001356040516020016108eb959493929190611074565b60405160208183030381529060405280519060200120905060005b6006811015610a6b576041848060a001906109219190611011565b8381811061093257610931610fd3565b5b905060200281019061094491906110c7565b90501461095657600092505050610a72565b6002816006811061096a57610969610fd3565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610a32858060a001906109b59190611011565b848181106109c6576109c5610fd3565b5b90506020028101906109d891906110c7565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610a2485610a77565b610aa790919063ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff1614610a5857600092505050610a72565b8080610a639061112a565b915050610906565b5060019150505b919050565b600081604051602001610a8a91906111f5565b604051602081830303815290604052805190602001209050919050565b6000806000610ab68585610ace565b91509150610ac381610b20565b819250505092915050565b600080604183511415610b105760008060006020860151925060408601519150606086015160001a9050610b0487828585610c8e565b94509450505050610b19565b60006002915091505b9250929050565b60006004811115610b3457610b3361121b565b5b816004811115610b4757610b4661121b565b5b1415610b5257610c8b565b60016004811115610b6657610b6561121b565b5b816004811115610b7957610b7861121b565b5b1415610bba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb190611296565b60405180910390fd5b60026004811115610bce57610bcd61121b565b5b816004811115610be157610be061121b565b5b1415610c22576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1990611302565b60405180910390fd5b60036004811115610c3657610c3561121b565b5b816004811115610c4957610c4861121b565b5b1415610c8a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8190611394565b60405180910390fd5b5b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c1115610cc9576000600391509150610d68565b600060018787878760405160008152602001604052604051610cee94939291906113df565b6020604051602081039080840390855afa158015610d10573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610d5f57600060019250925050610d68565b80600092509250505b94509492505050565b6000819050919050565b610d8481610d71565b82525050565b6000602082019050610d9f6000830184610d7b565b92915050565b600080fd5b600080fd5b610db881610d71565b8114610dc357600080fd5b50565b600081359050610dd581610daf565b92915050565b600060208284031215610df157610df0610da5565b5b6000610dff84828501610dc6565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e3382610e08565b9050919050565b610e4381610e28565b82525050565b6000602082019050610e5e6000830184610e3a565b92915050565b600080fd5b600060c08284031215610e7f57610e7e610e64565b5b81905092915050565b600060208284031215610e9e57610e9d610da5565b5b600082013567ffffffffffffffff811115610ebc57610ebb610daa565b5b610ec884828501610e69565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610f0b82610d71565b9150610f1683610d71565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610f4b57610f4a610ed1565b5b828201905092915050565b600082825260208201905092915050565b7f4e6f20656c617073656420646973707574650000000000000000000000000000600082015250565b6000610f9d601283610f56565b9150610fa882610f67565b602082019050919050565b60006020820190508181036000830152610fcc81610f90565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b600080fd5b6000808335600160200384360303811261102e5761102d611002565b5b80840192508235915067ffffffffffffffff8211156110505761104f611007565b5b60208301925060208202360383131561106c5761106b61100c565b5b509250929050565b600060a0820190506110896000830188610d7b565b6110966020830187610d7b565b6110a36040830186610d7b565b6110b06060830185610d7b565b6110bd6080830184610d7b565b9695505050505050565b600080833560016020038436030381126110e4576110e3611002565b5b80840192508235915067ffffffffffffffff82111561110657611105611007565b5b6020830192506001820236038313156111225761112161100c565b5b509250929050565b600061113582610d71565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561116857611167610ed1565b5b600182019050919050565b600081905092915050565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b60006111b4601c83611173565b91506111bf8261117e565b601c82019050919050565b6000819050919050565b6000819050919050565b6111ef6111ea826111ca565b6111d4565b82525050565b6000611200826111a7565b915061120c82846111de565b60208201915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b6000611280601883610f56565b915061128b8261124a565b602082019050919050565b600060208201905081810360008301526112af81611273565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b60006112ec601f83610f56565b91506112f7826112b6565b602082019050919050565b6000602082019050818103600083015261131b816112df565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b600061137e602283610f56565b915061138982611322565b604082019050919050565b600060208201905081810360008301526113ad81611371565b9050919050565b6113bd816111ca565b82525050565b600060ff82169050919050565b6113d9816113c3565b82525050565b60006080820190506113f460008301876113b4565b61140160208301866113d0565b61140e60408301856113b4565b61141b60608301846113b4565b9594505050505056fea26469706673582212207ff2aa55a6848826ad63a93fb14a09d08b9b2cc3ccc390bffb6d8fdac440636b64736f6c63430008090033";

type ProcessChannelConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ProcessChannelConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ProcessChannel__factory extends ContractFactory {
  constructor(...args: ProcessChannelConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _participants: PromiseOrValue<string>[],
    _disputeWindowInUNIX: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ProcessChannel> {
    return super.deploy(
      _participants,
      _disputeWindowInUNIX,
      overrides || {}
    ) as Promise<ProcessChannel>;
  }
  override getDeployTransaction(
    _participants: PromiseOrValue<string>[],
    _disputeWindowInUNIX: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _participants,
      _disputeWindowInUNIX,
      overrides || {}
    );
  }
  override attach(address: string): ProcessChannel {
    return super.attach(address) as ProcessChannel;
  }
  override connect(signer: Signer): ProcessChannel__factory {
    return super.connect(signer) as ProcessChannel__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ProcessChannelInterface {
    return new utils.Interface(_abi) as ProcessChannelInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ProcessChannel {
    return new Contract(address, _abi, signerOrProvider) as ProcessChannel;
  }
}
